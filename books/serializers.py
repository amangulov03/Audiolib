from rest_framework import serializers
from .models import Genre, Book, ReadingProgress
from reviews.serializers import ReviewSerializer

class GenreSerializer(serializers.ModelSerializer):
    class Meta:
        model = Genre
        fields = ['id', 'name', 'description']
        read_only_fields = ['id']

class ReadingProgressSerializer(serializers.ModelSerializer):
    book_title = serializers.CharField(source='book.title', read_only=True)
    book_author = serializers.CharField(source='book.author', read_only=True)
    completion_percentage = serializers.SerializerMethodField()  # üëà –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    
    class Meta:
        model = ReadingProgress
        fields = [
            'id', 'book', 'book_title', 'book_author', 
            'last_position', 'last_timecode', 'last_page', 
            'updated_at', 'completion_percentage'
        ]
        read_only_fields = ['user', 'updated_at', 'completion_percentage']

    def get_completion_percentage(self, obj):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        if obj.book and obj.book.total_pages:
            return round((obj.last_page / obj.book.total_pages) * 100, 2)
        return None

class BookListSerializer(serializers.ModelSerializer):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
    genres = serializers.SlugRelatedField(
        many=True,
        read_only=True,
        slug_field='name'
    )
    average_rating = serializers.SerializerMethodField()
    
    class Meta:
        model = Book
        fields = [
            'id', 'title', 'author', 'published_date', 
            'format_type', 'cover_image', 'genres', 'average_rating'
        ]
    
    def get_average_rating(self, obj):
        reviews = obj.reviews.all()
        if not reviews:
            return 0
        total_rating = sum(review.rating for review in reviews)
        return round(total_rating / len(reviews), 2)

class BookDetailSerializer(serializers.ModelSerializer):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏"""
    genres = GenreSerializer(many=True, read_only=True)
    reviews = ReviewSerializer(many=True, read_only=True)
    average_rating = serializers.SerializerMethodField()
    reading_progress = serializers.SerializerMethodField()
    is_in_user_library = serializers.SerializerMethodField()
    
    class Meta:
        model = Book
        fields = [
            'id', 'title', 'author', 'description', 'published_date', 
            'format_type', 'file', 'cover_image', 'total_pages', 'duration',
            'genres', 'reviews', 'average_rating', 'reading_progress',
            'is_in_user_library', 'created_at'
        ]
        read_only_fields = ['created_at']
    
    def get_average_rating(self, obj):
        reviews = obj.reviews.all()
        if not reviews:
            return 0
        total_rating = sum(review.rating for review in reviews)
        return round(total_rating / len(reviews), 2)
    
    def get_reading_progress(self, obj):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        request = self.context.get('request')
        if request and request.user.is_authenticated:
            try:
                progress = ReadingProgress.objects.get(
                    user=request.user, 
                    book=obj
                )
                return ReadingProgressSerializer(progress).data
            except ReadingProgress.DoesNotExist:
                return None
        return None
    
    def get_is_in_user_library(self, obj):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫–Ω–∏–≥–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        request = self.context.get('request')
        if request and request.user.is_authenticated:
            return ReadingProgress.objects.filter(
                user=request.user, 
                book=obj
            ).exists()
        return False

# –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å context –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è)
class BookSerializer(serializers.ModelSerializer):
    """–£–º–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    genres = GenreSerializer(many=True, read_only=True)
    average_rating = serializers.SerializerMethodField()
    
    class Meta:
        model = Book
        fields = [
            'id', 'title', 'author', 'description', 
            'published_date', 'format_type', 'file', 
            'cover_image', 'genres', 'average_rating'
        ]
    
    def get_average_rating(self, obj):
        reviews = obj.reviews.all()
        if not reviews:
            return 0
        total_rating = sum(review.rating for review in reviews)
        return round(total_rating / len(reviews), 2)
    
    def to_representation(self, instance):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ output –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        request = self.context.get('request')
        
        if request and 'detail' in request.query_params:
            # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
            return BookDetailSerializer(instance, context=self.context).to_representation(instance)
        else:
            # –î–ª—è —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            representation = super().to_representation(instance)
            # –î–æ–±–∞–≤–ª—è–µ–º reviews —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            if request and 'with_reviews' in request.query_params:
                representation['reviews'] = ReviewSerializer(
                    instance.reviews.all(), 
                    many=True
                ).data
            return representation